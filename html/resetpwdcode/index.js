define(['regularjs', 'jquery', '../../javascript/base/util', '../../html/resetpwdcode/index.html', '../../javascript/widget/tip.js', '../../javascript/widget/dialog.js', '../../javascript/base/const.js', '../../javascript/3rd/cookie.js', '../../javascript/3rd/base64.js', '../../html/loginnav/index.js'], function(Regular, $, util, index, tip, dialog, api, cookie, Base64) {    require('../../css/resetpwdcode.css')    return Regular.extend({        template: '<loginNav>' + index + '</loginNav>',        data: {            reset: {                account: '',//帐号                verifyCode: '',//验证码                type: '',//类型（mobile or email）                timeOut: 0, //发送                sendMsg: '获取验证码' //文案            },            error: {                verifyError: ''            }        },        init: function() {            if (!cookie.get('mtmp')) {//没有设置账户信息cookie则跳转重置密码页面                window.location.href = './resetpwd.html';                return;            }            this.initCtrol();            //获取url带的参数            this.data.reset.type = util.getQueryString('type');            if (this.data.reset.type == 'email') {                this.data.reset.account = Base64.decode(cookie.get('etmp'));            } else {                this.data.reset.account = Base64.decode(cookie.get('mtmp'));            }            this.data.reset.sendMsg = '重新发送';            this.data.reset.timeOut = 60;            this.timer();            this.$update();            this.$update();        },        /**         * 初始化控件         */        initCtrol: function() {            //提示框            this.tip = util.tip();        },        /**         * 获取验证码         */        sendCode: function() {            var self = this;            if (self.data.reset.timeOut) return;            //发送登录请求            util.rest(api.USER.getSmsCode, {                param: {mobile: this.data.reset.account},                method: 'post',                onload: function(data) {                    console.info('成功');                    if (data && typeof data != undefined) {                        self.data.reset.sendMsg = '重新发送';                        self.data.reset.timeOut = 60;                        self.timer();                        self.$update();                    }                },                onerror: function(data) {                    console.info('牺牲');                    self.data.error.verifyError = '获取验证失败，请点击重试';                    self.$update();                }            })        },        /**         * 倒数计时         */        timer: function() {            var self = this;            this.__timer = setTimeout(function() {                self.data.reset.timeOut--;                console.info(self.data.reset.timeOut)                if (self.data.reset.timeOut === 0) {                    clearTimeout(self.__timer);                    self.data.reset.sendMsg = '重新发送'; //发送成功开始计时                } else {                    self.timer();                }                self.$update();            }, 1000)        },        /**         * 确认按钮点击         */        sureClick: function() {            var self = this;            if (!self.data.reset.account) {                self.tip.showErrorTip('无效链接');                return;            }            console.info(888);            var result = this.verify();            this.data.error = {                verifyError: ''            }            if (result.error) {                this.data.error.verifyError = result.errmsg;                this.$update();                return;            }            console.info('send1', result);            //发送重置密码请求            util.rest(api.USER.verifyCode, {                param: result,                method: 'post',                onload: function(data) {                    console.info('成功',data);                    window.location.href = './resetpwdenter.html?type=' + self.data.reset.type;                },                onerror: function(data) {                    console.info('牺牲',data);                    self.tip.showErrorTip(data.message || '操作失败，请稍后重试');                }            })        },        /**         * 校验账号密码输入         */        verify: function() {            if (!util.trim(this.data.reset.verifyCode)) {                return {                    error: true,                    errmsg: '请输入收到的验证码'                }            }            if (this.data.reset.type == 'mobile') {                return {                    usage: 'resetpass',                    mobile: this.data.reset.account,                    code: util.trim(this.data.reset.verifyCode)                }            } else {                return {                    email: this.data.reset.account,                    usage: 'resetpass',                    code: util.trim(this.data.reset.verifyCode)                }            }        }    });});