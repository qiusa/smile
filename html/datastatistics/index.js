/** * 数据统计页面 */define(['regularjs', 'jquery', '../../javascript/base/util', '../../html/datastatistics/index.html', '../../javascript/widget/tip.js', '../../javascript/widget/dialog.js', '../../javascript/base/const.js', '../../javascript/widget/pager/pager.js', '../../html/sliderbar/index.js', 'echarts', '../../javascript/3rd/cookie.js'], function(Regular, $, util, index, tip, dialog, api, pager, sliderbar, echarts, cookie) {    require('../../css/datastatistics.css');    return Regular.extend({        template: '<sliderbarTpl pro = {user}>' + index + '</sliderbarTpl>',        data: {            //登陆账户密码            user: {                nick: '',                icon: '',                type: 3 //左侧导航栏模块标识            },            config: { //服务器返回的数据                data: '',                st: {}            },            renderConfig: { //渲染页面的数据                yesterday: {},                type: 'spent', //统计类型  spent:金额；traffic:流量                chart: {                    xAxis: [],                    seriesSpent: [],                    seriesTraffic: []                },                listData: '' //展示分页的当前页数据            },            show: { //用于页面显示                navIndex: 1,                pageNumber: 1,            }        },        init: function() {            this.initCtrol();            this.render();        },        /**         * 初始化控件         */        initCtrol: function() {            //提示框            this.tip = util.tip();            this.initChart();            var self = this;            setTimeout(function() {                //初始化时间选择器 延时处理 防止moment报错                self.initDate();            }, 0);        },        /**         * 初始化时间选择器         * @param  {obj} stime 选择时间范围         */        initDate: function(stime) {            var self = this,                param = '';            stime = stime ? stime : moment().subtract(7, 'day'); //若无传入则默认显示最近一周            param = self.buildTime(stime, moment().subtract(1, 'day'));            self.renderChart('', param.st, param.et, param.num);            //日历控件            $(self.$refs.timeConfig).daterangepicker({                "locale": {                    "format": 'YYYY-MM-DD'                },                "autoApply": true,                "startDate": stime,                "endDate": moment().subtract(1, 'day'),                "opens": "center"            }, function(start, end, label) {                param = self.buildTime(start, end);                console.info('labellabel', start.format('YYYY-MM-DD'), end.format('YYYY-MM-DD'), param)                self.renderChart('', param.st, param.et, param.num);            });        },        /**         * 时间转换为表格         * @param  {String} stime 开始时间         * @param  {String} end   结束时间         */        buildTime: function(stime, end) {            var st = new Date(new Date(parseInt(stime.format('x'))).setHours(0, 0, 0, 0)).getTime(),                et = new Date(new Date(parseInt(end.format('x'))).setHours(0, 0, 0, 0)).getTime(),                num = (et - st) / 86400000 + 1;            return {                st: st,                et: et,                num: num            }        },        /**         * 渲染页面         * @return {[type]} [description]         */        render: function() {            var self = this;        },        renderPage: function(page) {            this.data.show.pageNumber = page;            this.$update();            console.info(this);        },        /**         * 时间选择         * @param  {string} range 选择范围         */        selectTime: function(range) {            if (range == 'week') {                this.data.show.navIndex = 1;                this.initDate(moment().subtract(6, 'day'))                    //this.renderChart('uuu', true);            } else if (range == 'month') {                this.data.show.navIndex = 2;                this.initDate(moment().subtract(1, 'month'))                    //this.renderChart('aaa', false);            }        },        /**         * 渲染数据         */        initChart: function() {            var self = this;            self.myChart = echarts.init(this.$refs.chart);            self.options = {                title: {                    text: '一周统计'                },                tooltip: {                    trigger: 'axis'                },                xAxis: {                    boundaryGap: false,                    data: []                },                yAxis: {                    type: 'value',                    axisLabel: {                        formatter: '{value}'                    }                },                series: [{                    name: '销量',                    type: 'line',                    data: [],                    itemStyle: {                        normal: {                            color: '#14cd98'                        }                    },                    areaStyle: {                        normal: {                            color: new echarts.graphic.LinearGradient(0, 0, 0, 1, [{                                offset: 0,                                color: '#8ec6ad'                            }, {                                offset: 1,                                color: '#ffe'                            }])                        }                    }                }]            };            self.myChart.showLoading({                text: '正在努力的读取数据中...', //loading话术            });        },        /**         * 渲染图表         * @param  {String} type  渲染图表类型         */        renderChart: function(type, start, end, num) {            var self = this,                param = {                    withInfo: true,                    start: start,                    end: end                };            this.config.st = {                start: start,                end: end            }            console.info('2---', param, start, end, num)            if (type) self.data.renderConfig.type = type; //选择图表类型            if (self.data.renderConfig.chart.xAxis.length && type) { //在有type时说明是金额和流量切换 无需重新请求数据                self.renderChartSuccess(self.data.renderConfig.chart.xAxis, self.data.renderConfig.type == "spent" ? self.data.renderConfig.chart.seriesSpent : self.data.renderConfig.chart.seriesTraffic);            } else {                self.data.renderConfig.chart = {                    xAxis: [],                    seriesSpent: [],                    seriesTraffic: []                }                util.rest(api.COMPANY.stats, {                    param: param,                    method: 'post',                    onload: function(data) {                        console.info('成功', data);                        self.data.config.data = data;                        var obj = {},                            time = '',                            date = end;                        $.each(data.consumeRecordList, function(index, item) {                            obj[item.start] = {                                spent: item.spent,                                traffic: item.traffic                            }                        });                        for (var i = 0; i < (num || 7); i++) {                            time = date - i * 86400000;                            console.info('time', time, util.getLocalTime(time))                            self.data.renderConfig.chart.xAxis.unshift(util.getLocalTime(time));                            self.data.renderConfig.chart.seriesSpent.unshift((obj[time] && (obj[time].spent / 100).toFixed(2)) || 0);                            self.data.renderConfig.chart.seriesTraffic.unshift((obj[time] && (obj[time].traffic / 1024 / 1024 / 1024).toFixed(2)) || 0);                        }                        self.data.renderConfig.yesterday = {                            spent: (obj[date] && obj[date].spent) || 0,                            traffic: (obj[date] && obj[date].traffic) || 0                        }                        self.$update();                        console.info(9999999, self.data.renderConfig)                        self.renderChartSuccess(self.data.renderConfig.chart.xAxis, self.data.renderConfig.type == "spent" ? self.data.renderConfig.chart.seriesSpent : self.data.renderConfig.chart.seriesTraffic);                    },                    onerror: function(data) {                        console.info('牺牲', data);                        //停止动画载入提示                        self.myChart.hideLoading();                        self.data.show.loadMsg = '加载失败，请刷新浏览器';                        self.$update();                    }                })            }        },        /**         * 成功渲染表格数据         * @param  {[type]} xAxis  [description]         * @param  {[type]} series [description]         */        renderChartSuccess: function(xAxis, series) {            //停止动画载入提示            this.myChart.hideLoading();            this.options.title = {                text: '一周统计'            }            this.options.xAxis = {                boundaryGap: false,                data: xAxis            }            this.options.series = [{                name: '数据',                type: 'line',                data: series,                itemStyle: {                    normal: {                        color: '#14cd98'                    }                },                areaStyle: {                    normal: {                        color: new echarts.graphic.LinearGradient(0, 0, 0, 1, [{                            offset: 0,                            color: '#8ec6ad'                        }, {                            offset: 1,                            color: '#ffe'                        }])                    }                }            }]            console.info('哦破', this.options);            // 绘制图表            this.myChart.setOption(this.options);            this.initPager(xAxis.length);        },        /**         * [initPager description]         * @param  {} total [description]         */        initPager: function(total) {            var self = this;            console.info('总数', total)            if (this.pager) this.pager.close();            //分页控件            var pager = Regular.extend({                data: {                    total: total,                    current: 1                },                template: "<pager total={Math.ceil(total/10)} current={current} on-nav={this.changePage($event)}/>",                changePage: function(page) {                    console.info('快捷键', page);                    //self.renderPage(page);                    var start = page - 1 > 0 ? (page - 1) * 10 : 0,                        end = page * 10;                    self.data.renderConfig.listData = {                        xAxis: self.data.renderConfig.chart.xAxis.slice(start, end),                        seriesSpent: self.data.renderConfig.chart.seriesSpent.slice(start, end),                        seriesTraffic: self.data.renderConfig.chart.seriesTraffic.slice(start, end)                    }                    console.info('数据', self.data.renderConfig.listData);                    self.$update();                },                init: function() {                },                /**                 *  销毁节点                 */                close: function() {                    this.destroy();                }            })            this.pager = new pager();            this.pager.$inject('#pager');            this.data.renderConfig.listData = {                xAxis: self.data.renderConfig.chart.xAxis.slice(0, 10),                seriesSpent: self.data.renderConfig.chart.seriesSpent.slice(0, 10),                seriesTraffic: self.data.renderConfig.chart.seriesTraffic.slice(0, 10)            }            this.$update();            console.info('数据', this.data.renderConfig.listData)        },        /**         * 下载文件         */        download: function() {            var inputs = '';            inputs = '<input type="text" name="token" value="' + cookie.get('token') + '"><input type="text" name="uid" value="' + cookie.get('uid') + '"><input type="text" name="start" value="' + this.config.st.start + '"><input type="text" name="end" value="' + this.config.st.end + '">';            $('<form action="' + api.COMPANY.download + '" method="post" target="hidden_iframe" enctype="application/x-www-form-urlencoded">' + inputs + '</form>')                .appendTo('body').submit().remove();        },        /**         * 操作显示列表         */        onShow: function(event) {            Regular.dom.addClass(event.origin, 'live');        },        /**         * 操作隐藏列表         */        onHide: function(event) {            Regular.dom.delClass(event.origin, 'live');        }    });});