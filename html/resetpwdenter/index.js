define(['regularjs', 'jquery', '../../javascript/base/util', '../../html/resetpwdenter/index.html', '../../javascript/widget/tip.js', '../../javascript/widget/dialog.js', '../../javascript/base/const.js', '../../javascript/3rd/cookie.js', '../../javascript/3rd/base64.js', '../../javascript/3rd/md5.js', '../../html/loginnav/index.js'], function(Regular, $, util, index, tip, dialog, api, cookie, Base64, md5) {    require('../../css/resetpwdenter.css')    return Regular.extend({        template: '<loginNav>' + index + '</loginNav>',        data: {            //登陆账户密码            reset: {                account: '',                type: '', //类型（mobile or email）                pwd: '', //新密码                pwdSecond: '' //新密码            },            error: {                pwdError: '',                pwdSecondError: ''            }        },        init: function() {            if (!cookie.get('mtmp')) {//没有设置账户信息cookie则跳转重置密码页面                window.location.href = './resetpwd.html';                return;            }            this.initCtrol();            //获取url带的参数            this.data.reset.type = util.getQueryString('type');            if (this.data.reset.type == 'email') {                this.data.reset.account = Base64.decode(cookie.get('etmp'));            } else {                this.data.reset.account = Base64.decode(cookie.get('mtmp'));            }        },        /**         * 初始化控件         */        initCtrol: function() {            //提示框            this.tip = util.tip();        },        /**         * 提交按钮点击         */        submitClick: function() {            var self = this;            if (!self.data.reset.account) {                self.tip.showErrorTip('无效链接');                return;            }            var result = this.verify();            this.data.error = {                pwdError: '',                pwdSecondError: ''            }            if (result.error) {                if (result.type == 1) {                    this.data.error.pwdError = result.errmsg;                } else {                    this.data.error.pwdSecondError = result.errmsg;                }                return;            }            console.info('send1', result);            //发送重置密码请求            util.rest(api.USER.setNewPassword, {                param: result,                method: 'post',                onload: function(data) {                    console.info('成功',data);                    cookie.remove('etmp');                    cookie.remove('mtmp');                    //跳转带参数                    window.location.href = './resetpwdsuccess.html?type=' + self.data.reset.type;                },                onerror: function(data) {                    console.info('牺牲',data);                    self.tip.showErrorTip(data.message || '操作失败，请稍后重试');                }            })        },        /**         * 校验账号密码输入         */        verify: function() {            if (!util.trim(this.data.reset.pwd)) {                return {                    error: true,                    type: 1,                    errmsg: '请输入新密码不能为空'                }            }            if (this.data.reset.pwd.length < 6 || this.data.reset.pwd.length > 16) {                return {                    error: true,                    type: 1,                    errmsg: '请输入6-16位密码'                }            }            if (util.verify('pwd', this.data.reset.pwd)) {                return {                    error: true,                    type: 1,                    errmsg: '密码需包含字母，数字，字符中至少两种格式'                }            }            if (!util.trim(this.data.reset.pwdSecond)) {                return {                    error: true,                    type: 2,                    errmsg: '请再次输入密码不能为空'                }            }            if (this.data.reset.pwd != this.data.reset.pwdSecond) {                return {                    error: true,                    type: 2,                    errmsg: '密码不一致'                }            }            if (this.data.reset.type == 'mobile') {                result = {                    mobile: this.data.reset.account,                    password: md5(util.trim(this.data.reset.pwd)),                }            } else {                result = {                    email: this.data.reset.account,                    password: md5(util.trim(this.data.reset.pwd)),                }            }            return result;        }    });});