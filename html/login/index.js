define(['regularjs', 'jquery', '../../javascript/base/util', '../../html/login/index.html', '../../javascript/3rd/anime.js', '../../javascript/widget/tip.js', '../../javascript/3rd/cookie.js', '../../javascript/base/const.js', '../../javascript/3rd/md5.js', '../../html/loginnav/index.js'], function(Regular, $, util, index, anime, tip, cookie, api, md5) {    require('../../css/login.css')    console.info(999,api)    return Regular.extend({        template: '<loginNav>' + index + '</loginNav>',        data: {            //登陆账户密码            user: {                email: '',                pwd: '',                verifyCode: ''//图片验证码            },            show: {                check: false,                errmsg: '',                isVerify: false,//是否需要验证码                imgCodeUrl: api.USER.getImageCode + '?t=' + new Date().getTime()//验证码请求时间戳            }        },        init: function() {            this.initCtrol();            this.render();        },        /**         * 初始化控件         */        initCtrol: function() {            //提示框            this.tip = new tip();            this.tip.$inject('body');        },        render: function() {            console.info(1111,cookie.get('token'))            if (cookie.get('remember')) {                this.data.show.check = true;                this.data.user.email = cookie.get('account');                this.$update();            }        },        /**         * 登录按钮点击         */        loginClick: function() {            console.info('/md5',md5("value"))            var result = this.verify(),                self = this;            if (result.error) {                this.data.show.errmsg = result.errmsg;                return;            }            console.info('send', result);            //发送登录请求            util.rest(api.USER.login, {                param: result,                method: 'post',                onload: function(data) {                    console.info('成功');                    if (self.data.show.check) {                        cookie.set({                           remember: true,                           account: result.email                        });                    } else {                        cookie.remove('remember');                    }                    //设置token到cookie 后续调用接口使用                    cookie.set({                       token: data.token,                       uid: data.uid                    });                    window.location.href = './accountoverview.html';                },                onerror: function(data) {                    if (data.code == 10) {                        self.data.show.isVerify = true;                        self.$update();                    }                    if (data && data.message) {                        self.data.show.errmsg = data.message;                        self.$update();                    }                    console.info('牺牲',data);                }            })        },        /**         * 获取图片验证码         * @return {[type]} [description]         */        getVerifyImg: function() {            this.data.show.imgCodeUrl = api.USER.getImageCode + '?t=' + new Date().getTime();            this.$update();         },        /**         * 校验账号密码输入         */        verify: function() {            var regEmail = /^([\w-_]+(?:\.[\w-_]+)*)@((?:[a-z0-9]+(?:-[a-zA-Z0-9]+)*)+\.[a-z]{2,6})$/i,                result = {};            if (!util.trim(this.data.user.email)) {                return {                    error: true,                    errmsg: '邮箱不能为空！'                }            }            if (!regEmail.test(util.trim(this.data.user.email))) {                return {                    error: true,                    errmsg: '邮箱格式错误'                }            }            if (!util.trim(this.data.user.pwd)) {                return {                    error: true,                    errmsg: '密码不能为空！'                }            }            console.info(this.data.user.verifyCode)            if (this.data.show.isVerify && !util.trim(this.data.user.verifyCode)) {                return {                    error: true,                    errmsg: '验证码不能为空'                }            }            //^(?![0-9]+$)(?![a-zA-Z]+$)[0-9A-Za-z]{8,16}$            result = {                email: this.data.user.email,                password: md5(util.trim(this.data.user.pwd)),                remm: this.data.show.check            };            if (this.data.show.isVerify) {                result.imagecode = util.trim(this.data.user.verifyCode);            }            return result;        }    });});