/** * 我的摄像机页面 */define(['regularjs', 'jquery', '../../javascript/base/util', '../../html/mycamera/index.html', '../../javascript/widget/tip.js', '../../javascript/widget/dialog.js', '../../html/sliderbar/index.js', '../../javascript/widget/pager/pager.js', '../../javascript/base/const.js'], function(Regular, $, util, index, tip, dialog, sliderbar, pager, api) {    require('../../css/mycamera.css');    return Regular.extend({        template: '<sliderbarTpl pro = {user}>' + index + '</sliderbarTpl>',        data: {            //登陆账户密码            user: {                nick: '',                icon: '',                type: 2 //左侧导航栏模块标识            },            showParams: {                show: 2,                searchValue: '',//搜索内容                checkboxAll: false, //是否选中全部                temp: ''//临时变量            },            config: {                total: 0//设备数量            },            renderConfig: {            },            dataList: []        },        init: function() {            this.initCtrol();            this.initWatch();            this.initEvent();            this.render(1);        },        /**         * 初始化控件         * @return {} [description]         */        initCtrol: function() {            //提示框            this.tip = util.tip();        },        initPager: function() {            var self = this;            if (!this.pager) {                //分页控件                var pager = Regular.extend({                    template: "<pager total={Math.ceil(total/2)} current={current} on-nav={this.changePage($event)}/>",                    changePage: function(page) {                        console.info('self',page);                        self.render(page);                    }                })                this.pager = new pager({                    data: {                        total: self.data.config.total,                        current: 1                    }                }).$inject('#pager');              }        },        /**config         * 监听事件         */        initWatch: function() {            this.$watch('showParams.checkboxAll', function(oldValue, newValue) {                if (newValue == undefined) return; //变化值为undefined为无效触发                for (var i = 0; i < this.data.dataList.length; i++) {                    this.data.dataList[i].checkbox = newValue ? false : true;                }            });        },        initEvent: function() {            //下拉框点击事件            $(document).on('click', function(event) {                $('.j-select').removeClass('live');                if ($(event.target).hasClass('j-select')) {                    $(event.target).addClass('live');                }            });        },        renderPage: function(page) {            this.data.pageNumber = page;            this.$update();            console.info(this);        },        render: function(page, isOrder) {            var self = this,                param = {                    limit: 2,                    offset: 2 * (page - 1)                };            if (isOrder == 0 || isOrder == 1 || isOrder == 2) {                param.isOrder = isOrder;            }            util.rest(api.DEVICE.deviceList, {                param: param,                method: 'post',                onload: function(data) {                    console.info('成功',data);                    self.data.dataList = data.result;                    self.data.config.total = data.total || 0;                    self.$update();                    self.initPager();                },                onerror: function(data) {                    console.info('牺牲',data)                    self.tip.showErrorTip(data.message || '加载数据失败，请稍后重试')                }            })        },        /**         * 排序         * @param  {Number} value 是否排序,选填,默认为0(按照设备添加时间排序) 1:在线排序;2:离线排序         */        order: function(value) {            this.render(1, value)        },        search: function() {            if (!util.trim(this.data.showParams.searchValue)) {                return;            }            var self = this,                param = {                    deviceId: this.data.showParams.searchValue                }            util.rest(api.DEVICE.deviceDetail, {                param: param,                method: 'post',                onload: function(data) {                    console.info('成功',data);                    self.data.dataList = [];                    if (data.deviceId) {                        self.data.dataList.push(data);                    }                    self.data.config.total = self.data.dataList.length;                    /*self.pager.data.total = self.data.config.total;                    self.pager.$update();*/                    self.$update();                    self.initPager();                },                onerror: function(data) {                    console.info('牺牲',data)                    self.tip.showErrorTip(data.message || '加载数据失败，请稍后重试')                }            })        },        /**         * 操作显示列表         */        onShow: function(event) {            Regular.dom.addClass(event.origin, 'live');        },        /**         * 操作隐藏列表         */        onHide: function(event) {            Regular.dom.delClass(event.origin, 'live');        },        /**         * 选中设备         */        check: function(index) {            console.info('index', index)            this.data.dataList[index].checkbox = this.data.dataList[index].checkbox ? false : true;            this.$update();        },        /**         * 编辑设备名称         * @param  {[type]} event [description]         * @param  {Stirng} value 当前设备名称         */        edit: function(event, value) {            console.info(event)            this.data.showParams.temp = value;            this.$update();            event.origin.style.display = 'none';            event.origin.nextElementSibling.style.display = 'inline-block';            event.origin.nextElementSibling.firstElementChild.focus(); //input选中        },        /**         * 隐藏编辑设备名称         * @param  {[type]} event [description]         * @param  {Number} index 当前设备序号         * @param  {Stirng} value 修改的设备名称         */        hide: function(event, index, value) {            console.info(111,this.data.showParams.temp)            if (util.trim(value)) {                var self = this,                    param = {                        deviceId: self.data.dataList[index].deviceId,                        cameraName: value                    };                util.rest(api.DEVICE.setDeviceName, {                    param: param,                    method: 'post',                    onload: function() {                        console.info('成功');                        console.info(2222,self.data.showParams.temp)                        if (!self.data.showParams.temp) return;//如果是空 说明是调用了close方法 不做修改                        self.data.dataList[index].cameraName = value;                        self.$update();                        self.tip.showSuccessTip('设置成功');                        event.origin.parentElement.style.display = 'none';                        event.origin.parentElement.previousElementSibling.style.display = 'inline-block';                    },                    onerror: function() {                        self.tip.showErrorTip('设置失败，请稍后再试');                        event.origin.parentElement.style.display = 'none';                        event.origin.parentElement.previousElementSibling.style.display = 'inline-block';                    }                })            } else {                event.origin.parentElement.style.display = 'none';                event.origin.parentElement.previousElementSibling.style.display = 'inline-block';            }        },        close: function(event) {            this.data.showParams.temp = '';            this.$update();            event.origin.previousElementSibling.focus();        },        addPhoneVerify: function(data) {            var addPhoneVerifyDialog = new dialog({                data: {                    pro: {                        id: 'addPhoneVerify',                        single: false,                        singleCenter: true, //一个居中按钮                        title: '添加手机号',                        confirmBtnText: '下一步',                        confirmCallback: function() {                            console.info(this)                            self.addPhoneVerify(this.addPhone);                        },                        cancelBtnText: '取消',                        cancelCallback: function() {},                        isAnimate: true, //是否有动画                        isFull: false, //是否添加溢出 == 5                        addPhone: '', //增加的手机号码                        message: '' //删除的手机号码                    }                },                template: '<diglogTpl pro={pro}>\                                <span>添加手机号</span>\                                <input type="text" r-model={pro.addPhone} />\                                <input type="text" r-model={pro.message}/>\                            </diglogTpl>'            });            addPhoneVerifyDialog.$inject('body');            console.info(this.dialog)        },        modifyDialog: function() {            var self = this;            //弹出框            this.dialog = new dialog({                data: {                    pro: {                        id: 'modifyDialog',                        single: false,                        singleCenter: true, //一个居中按钮                        title: '添加手机号',                        confirmBtnText: '下一步',                        confirmCallback: function() {                            console.info(this)                            this.isAnimate = false;                            self.addPhoneVerify(this.addPhone);                        },                        cancelBtnText: '取消',                        cancelCallback: function() {},                        isAnimate: true, //是否有动画                        isFull: false, //是否添加溢出 == 5                        phoneList: [12312, 22222], //手机号码列表                        addPhone: '', //增加的手机号码                        delPhone: '' //删除的手机号码                    }                },                template: '<diglogTpl pro={pro}>\                                <span>已添加的手机号（最多可添加5个）：</span>\                                {#list pro.phoneList as item}\                                <dl data-index={iten_index}>\                                    <dt>{item}</dt>\                                    <dd on-click={this.delPhone()}>x</dd>\                                </dl>\                                {/list}\                            </diglogTpl>'            });            this.dialog.$inject('body');            console.info(this.dialog)        }    });});