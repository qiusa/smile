/** * 账户总览页面 */define(['regularjs', 'jquery', '../../javascript/base/util', '../../html/accountoverview/index.html', '../../javascript/widget/tip.js', '../../javascript/base/const.js', '../../html/sliderbar/index.js', 'echarts'], function(Regular, $, util, index, tip, api, sliderbar, echarts) {    require('../../css/accountoverview.css');    return Regular.extend({        template: '<sliderbarTpl pro = {user}>' + index + '</sliderbarTpl>',        data: {            //登陆账户密码            user: {                nick: '游客考拉a',                icon: '',                type: 1 //左侧导航栏模块标识            },            config: { //服务器返回的数据                data: ''            },            renderConfig: { //渲染页面的数据                yesterday: {},                type: 'spent', //统计类型  spent:金额；traffic:流量                chart: {                    xAxis: [],                    seriesSpent: [],                    seriesTraffic: []                }            },            show: {                loadMsg: '加载中...'            },            chart: {}        },        init: function() {            this.initCtrol();            this.render();        },        /**         * 初始化控件         * @return {[type]} [description]         */        initCtrol: function() {            //提示框            this.tip = util.tip();        },        /**         * 渲染数据         */        render: function() {            var self = this;            setTimeout(function() { //延时执行 否则取不到节点                self.myChart = echarts.init(document.getElementById('chart'));                self.options = {                    title: {                        text: '一周统计'                    },                    tooltip: {                        trigger: 'axis'                    },                    xAxis: {                        boundaryGap: false,                        data: []                    },                    yAxis: {                        type: 'value',                        axisLabel: {                            formatter: '{value}'                        }                    },                    series: [{                        name: '数量',                        type: 'line',                        data: [],                        itemStyle: {                            normal: {                                color: '#14cd98'                            }                        },                        areaStyle: {                            normal: {                                color: new echarts.graphic.LinearGradient(0, 0, 0, 1, [{                                    offset: 0,                                    color: '#8ec6ad'                                }, {                                    offset: 1,                                    color: '#ffe'                                }])                            }                        }                    }]                };                self.myChart.showLoading({                    text: '正在努力的读取数据中...', //loading话术                });                self.renderChart();            }, 0)        },        /**         * 渲染图表         * @param  {String} type  渲染图表类型         */        renderChart: function(type) {            var self = this,                param = {                    withInfo: true                };            if (type) self.data.renderConfig.type = type; //选择图表类型            if (self.data.renderConfig.chart.xAxis.length && type) { //在有type时说明是金额和流量切换 无需重新请求数据                self.renderChartSuccess(self.data.renderConfig.chart.xAxis, self.data.renderConfig.type == "spent" ? self.data.renderConfig.chart.seriesSpent : self.data.renderConfig.chart.seriesTraffic);            } else {                self.data.renderConfig.chart = {                    xAxis: [],                    seriesSpent: [],                    seriesTraffic: []                }                util.rest(api.COMPANY.stats, {                    param: param,                    method: 'post',                    onload: function(data) {                        console.info('成功', data);                        self.data.show.loadMsg = false;                        self.data.config.data = data;                        self.$update();                        var obj = {},                            time = '',                            date = new Date(new Date().setHours(0, 0, 0, 0)).getTime(); //获取当前日期                        $.each(data.consumeRecordList, function(index, item) {                            obj[item.start] = {                                spent: item.spent,                                traffic: item.traffic                            }                        });                        for (var i = 0; i < 7; i++) {                            time = date - i * 86400000;                            self.data.renderConfig.chart.xAxis.unshift(util.getLocalTime(time));                            self.data.renderConfig.chart.seriesSpent.unshift((obj[time] && (obj[time].spent / 100).toFixed(2)) || 0);                            self.data.renderConfig.chart.seriesTraffic.unshift((obj[time] && (obj[time].traffic / 1024 / 1024 / 1024).toFixed(2)) || 0);                        }                        self.data.renderConfig.yesterday = {                            spent: (obj[date] && obj[date].spent) || 0,                            traffic: (obj[date] && obj[date].traffic) || 0                        }                        self.renderChartSuccess(self.data.renderConfig.chart.xAxis, self.data.renderConfig.type == "spent" ? self.data.renderConfig.chart.seriesSpent : self.data.renderConfig.chart.seriesTraffic);                    },                    onerror: function(data) {                        console.info('牺牲', data);                        //停止动画载入提示                        self.myChart.hideLoading();                        self.data.show.loadMsg = '加载失败，请刷新浏览器';                        self.$update();                    }                })            }        },        /**         * 成功渲染表格数据         * @param  {[type]} xAxis  [description]         * @param  {[type]} series [description]         */        renderChartSuccess: function(xAxis, series) {            //停止动画载入提示            this.myChart.hideLoading();            this.options.title = {                text: '一周统计'            }            this.options.xAxis = {                boundaryGap: false,                data: xAxis            }            this.options.series = [{                name: '数据',                type: 'line',                data: series,                itemStyle: {                    normal: {                        color: '#14cd98'                    }                },                areaStyle: {                    normal: {                        color: new echarts.graphic.LinearGradient(0, 0, 0, 1, [{                            offset: 0,                            color: '#8ec6ad'                        }, {                            offset: 1,                            color: '#ffe'                        }])                    }                }            }]            console.info('哦破', this.options);            // 绘制图表            this.myChart.setOption(this.options);        },        /**         * 操作显示列表         */        onShow: function(event) {            Regular.dom.addClass(event.origin, 'live');        },        /**         * 操作隐藏列表         */        onHide: function(event) {            Regular.dom.delClass(event.origin, 'live');        },        change: function(value) {            this.renderChart('uuu', value);        }    });});