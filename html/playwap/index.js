define(['regularjs', 'jquery', '../../javascript/base/util', '../../html/play/index.html', '../../javascript/widget/tip.js', '../../javascript/3rd/cookie.js', '../../javascript/base/const.js', '../../javascript/3rd/md5.js', '../../html/loginnav/index.js'], function(Regular, $, util, index, tip, cookie, api, md5) {    require('../../css/play.css')    return Regular.extend({        template: index,        data: {            //登陆账户密码            user: {                email: '',                pwd: '',                verifyCode: '' //图片验证码            },            show: {                check: true,                errmsg: '',                isVerify: false, //是否需要验证码                imgCodeUrl: api.USER.getImageCode + '?t=' + new Date().getTime() //验证码请求时间戳            }        },        init: function() {            this.initCtrol();            this.render();        },        /**         * 初始化控件         */        initCtrol: function() {            //提示框            this.tip = util.tip();        },        render: function() {        },        /**         * 登录按钮点击         */        loginClick: function() {            console.info('/md5', md5("value"))            var result = this.verify(),                self = this;            if (result.error) {                this.data.show.errmsg = result.errmsg;                return;            }            console.info('send', result);            //发送登录请求            util.rest(api.USER.login, {                param: result,                method: 'post',                onload: function(data) {                    console.info('成功', data);                    //设置token到cookie 后续调用接口使用                    cookie.set({                        token: data.token,                        uid: data.uid,                        account: result.email                    });                    window.location.href = './accountoverview.html';                },                onerror: function(data) {                    console.info('牺牲', data);                    if (data.code == 10) {                        self.data.show.isVerify = true;                    }                    if (data.code == 8) {                        self.data.show.errmsg = '图片验证码错误';                        self.data.show.imgCodeUrl = api.USER.getImageCode + '?t=' + new Date().getTime();                    } else if (data.code == 16) {                        self.tip.showErrorTip('密码错误，为保证账号安全，请稍后再尝试。');                    } else if (data && data.message) {                        self.data.show.errmsg = data.message;                    }                    self.$update();                }            })        },        /**         * 获取图片验证码         * @return {[type]} [description]         */        getVerifyImg: function() {            this.data.show.imgCodeUrl = api.USER.getImageCode + '?t=' + new Date().getTime();            this.$update();        },        /**         * 校验账号密码输入         */        verify: function() {            var result = {};            if (!util.trim(this.data.user.email)) {                return {                    error: true,                    errmsg: '邮箱不能为空！'                }            }            if (util.verify('email', this.data.user.email)) {                return {                    error: true,                    errmsg: '邮箱格式错误'                }            }            if (!util.trim(this.data.user.pwd)) {                return {                    error: true,                    errmsg: '密码不能为空！'                }            }            console.info(this.data.user.verifyCode)            if (this.data.show.isVerify && !util.trim(this.data.user.verifyCode)) {                return {                    error: true,                    errmsg: '验证码不能为空'                }            }            //^(?![0-9]+$)(?![a-zA-Z]+$)[0-9A-Za-z]{8,16}$            result = {                email: this.data.user.email,                password: md5(util.trim(this.data.user.pwd)),                remm: this.data.show.check            };            if (this.data.show.isVerify) {                result.imagecode = util.trim(this.data.user.verifyCode);            }            return result;        }    });});